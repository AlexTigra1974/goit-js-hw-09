{"mappings":"qhBAAA,IAAAA,EAAAC,EAAA,SAEA,MAAMC,EAAOC,SAASC,cAAc,SACpCC,QAAQC,IAAIJ,GAEZ,MAAMK,EAAaJ,SAASC,cAAc,yBAEpCI,EAAYL,SAASC,cAAc,wBAEnCK,EAAcN,SAASC,cAAc,0BAErCM,EAAMP,SAASC,cAAc,UAyBnC,SAASO,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,CAACC,EAASC,KAC3BC,YAAW,KACaC,KAAKC,SAAW,GAIpCJ,EAAQ,C,SAAEH,E,MAAUC,IAGpBG,EAAO,C,SAAEJ,E,MAAUC,GAAQ,GAE5BA,EAAM,G,CAnCbX,EAAKkB,iBAAiB,UAAUC,IAC9BA,EAAEC,iBACF,MAAMC,EAAiBC,OAAOjB,EAAWkB,OACnCC,EAAOF,OAAOhB,EAAUiB,OACxBE,EAASH,OAAOf,EAAYgB,OAElC,IAAK,IAAIG,EAAW,EAAGA,EAAWD,EAAQC,GAAY,EAAG,CAGvDjB,EAAciB,EAFAL,EAAiBG,EAAOE,GAGnCC,MAAK,EAACjB,SAAEA,EAAQC,MAAEA,MACjBiB,EAAA9B,GAAS+B,OAAOC,QACd,uBAAqBpB,QAAiBC,MAAU,IAGnDoB,OAAM,EAACrB,SAAEA,EAAQC,MAAEA,MAClBiB,EAAA9B,GAAS+B,OAAOG,QACd,sBAAoBtB,QAAeC,MAAU,IAGnDH,EAAIyB,UAAW,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconsole.dir(form);\n\nconst inputDelay = document.querySelector('input[name = \"delay\"]');\n// console.log(inputDelay);\nconst inputStep = document.querySelector('input[name = \"step\"]');\n// console.log(inputStep);\nconst inputAmount = document.querySelector('input[name = \"amount\"]');\n// console.log(inputAmount);\nconst btn = document.querySelector('button');\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n  const fistInputDelay = Number(inputDelay.value);\n  const step = Number(inputStep.value);\n  const amount = Number(inputAmount.value);\n\n  for (let position = 0; position < amount; position += 1) {\n    const delay = fistInputDelay + step * position;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    btn.disabled = true;\n  }\n});\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$7Y9D8","parcelRequire","$47d4ff9957288465$var$form","document","querySelector","console","dir","$47d4ff9957288465$var$inputDelay","$47d4ff9957288465$var$inputStep","$47d4ff9957288465$var$inputAmount","$47d4ff9957288465$var$btn","$47d4ff9957288465$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","fistInputDelay","Number","value","step","amount","position1","then","$parcel$interopDefault","Notify","success","catch","failure","disabled"],"version":3,"file":"03-promises.591ea801.js.map"}