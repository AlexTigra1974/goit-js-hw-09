{"mappings":"iiBAAA,IAAAA,EAAAC,EAAA,SAEMC,EAAOC,SAASC,cAAc,SACpCC,QAAQC,IAAIJ,GAEZ,IAAMK,EAAaJ,SAASC,cAAc,yBAEpCI,EAAYL,SAASC,cAAc,wBAEnCK,EAAcN,SAASC,cAAc,0BAErCM,EAAMP,SAASC,cAAc,UAyBnC,SAASO,EAAcC,EAAUC,GAC/B,OAAO,IAAIC,SAAQ,SAACC,EAASC,GAC3BC,YAAW,WACaC,KAAKC,SAAW,GAIpCJ,EAAQ,CAAEH,WAAUC,UAGpBG,EAAO,CAAEJ,WAAUC,S,GAEpBA,E,IAnCPX,EAAKkB,iBAAiB,UAAU,SAAAC,GAC9BA,EAAEC,iBAKF,IAJA,IAAMC,EAAiBC,OAAOjB,EAAWkB,OACnCC,EAAOF,OAAOhB,EAAUiB,OACxBE,EAASH,OAAOf,EAAYgB,OAEzBG,EAAW,EAAGA,EAAWD,EAAQC,GAAY,EAAG,CAGvDjB,EAAciB,EAFAL,EAAiBG,EAAOE,GAGnCC,MAAK,SAAAC,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MACjBkB,EAAA/B,GAASgC,OAAOC,QACd,uBAAwCC,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAGjDsB,OAAM,SAAAL,G,IAAGlB,EAAQkB,EAARlB,SAAUC,EAAKiB,EAALjB,MAClBkB,EAAA/B,GAASgC,OAAOI,QACd,sBAAqCF,OAAftB,EAAS,QAAYsB,OAANrB,EAAM,M,IAGjDH,EAAI2B,UAAW,C","sources":["src/js/03-promises.js"],"sourcesContent":["import Notiflix from 'notiflix';\n\nconst form = document.querySelector('.form');\nconsole.dir(form);\n\nconst inputDelay = document.querySelector('input[name = \"delay\"]');\n// console.log(inputDelay);\nconst inputStep = document.querySelector('input[name = \"step\"]');\n// console.log(inputStep);\nconst inputAmount = document.querySelector('input[name = \"amount\"]');\n// console.log(inputAmount);\nconst btn = document.querySelector('button');\n\nform.addEventListener('submit', e => {\n  e.preventDefault();\n  const fistInputDelay = Number(inputDelay.value);\n  const step = Number(inputStep.value);\n  const amount = Number(inputAmount.value);\n\n  for (let position = 0; position < amount; position += 1) {\n    const delay = fistInputDelay + step * position;\n\n    createPromise(position, delay)\n      .then(({ position, delay }) => {\n        Notiflix.Notify.success(\n          `✅ Fulfilled promise ${position} in ${delay}ms`\n        );\n      })\n      .catch(({ position, delay }) => {\n        Notiflix.Notify.failure(\n          `❌ Rejected promise ${position} in ${delay}ms`\n        );\n      });\n    btn.disabled = true;\n  }\n});\nfunction createPromise(position, delay) {\n  return new Promise((resolve, reject) => {\n    setTimeout(() => {\n      const shouldResolve = Math.random() > 0.3;\n\n      if (shouldResolve) {\n        // Fulfill\n        resolve({ position, delay });\n      } else {\n        // Reject\n        reject({ position, delay });\n      }\n    }, delay);\n  });\n}\n"],"names":["$6JpON","parcelRequire","$ce04d3a99e08e73b$var$form","document","querySelector","console","dir","$ce04d3a99e08e73b$var$inputDelay","$ce04d3a99e08e73b$var$inputStep","$ce04d3a99e08e73b$var$inputAmount","$ce04d3a99e08e73b$var$btn","$ce04d3a99e08e73b$var$createPromise","position","delay","Promise","resolve","reject","setTimeout","Math","random","addEventListener","e","preventDefault","fistInputDelay","Number","value","step","amount","position1","then","param","$parcel$interopDefault","Notify","success","concat","catch","failure","disabled"],"version":3,"file":"03-promises.0e37ad35.js.map"}